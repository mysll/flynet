// Code generated by data parser.
// DO NOT EDIT!
package entity

import (
	"encoding/gob"
	. "server/data/datatype"
)

//获取类型
func GetType(name string) int {
	switch name {
	case "Item":
		return ITEM
	case "Container":
		return ITEM
	case "BaseScene":
		return SCENE
	case "Player":
		return PLAYER
	default:
		return NONE
	}
}

func CreateSaveLoader(typ string) DBSaveLoader {
	switch typ {
	case "Item":
		return &Item_Save{}
	case "Container":
		return &Container_Save{}
	case "BaseScene":
		return &BaseScene_Save{}
	case "Player":
		return &Player_Save{}
	default:
		return nil
	}
}

func Hash(str string) int32 {
	hash := 5381
	for _, c := range str {
		hash += (hash << 5) + int(c)
	}

	return int32(hash & 0x7FFFFFFF)
}

func IsItem(ent Entityer) bool {
	return ent.ObjTypeName() == "Item"
}

func IsContainer(ent Entityer) bool {
	return ent.ObjTypeName() == "Container"
}

func IsBaseScene(ent Entityer) bool {
	return ent.ObjTypeName() == "BaseScene"
}

func IsPlayer(ent Entityer) bool {
	return ent.ObjTypeName() == "Player"
}

//初始化函数
func init() {

	Register("Item", func() Entityer {
		return CreateItem()
	})
	ItemInit()

	Register("Container", func() Entityer {
		return CreateContainer()
	})
	ContainerInit()

	Register("BaseScene", func() Entityer {
		return CreateBaseScene()
	})
	BaseSceneInit()

	Register("Player", func() Entityer {
		return CreatePlayer()
	})
	PlayerInit()

	gob.Register(&EntityInfo{})
}
