// Code generated by data parser.
// DO NOT EDIT!
package entity

import (
	. "data/datatype"
	"encoding/gob"
	"errors"
)

var (
	ErrRowError                 = errors.New("row index out of range")
	ErrColError                 = errors.New("col index out of range")
	ErrTypeMismatch             = errors.New("val type mismatch")
	ErrColTypeError             = errors.New("column type error")
	ErrPropertyNotFound         = errors.New("property not found")
	ErrSqlRowError              = errors.New("sql query not found")
	ErrSqlUpdateError           = errors.New("update id not found")
	ErrContainerFull            = errors.New("container is full")
	ErrContainerIndexHasChild   = errors.New("container index not empty")
	ErrContainerIndexOutOfRange = errors.New("container index out of range")
	ErrContainerNotInit         = errors.New("container not init")
	ErrContainerCapacity        = errors.New("capacity illegal")
	ErrChildObjectNotFound      = errors.New("child obj not found")
	ErrCopyObjError             = errors.New("type not equal")
	ErrExtraDataError           = errors.New("extra data not found")
)

var objects = make(map[string]func() Entityer)

//注册函数
func register(name string, createfunc func() Entityer) {
	if _, dup := objects[name]; dup {
		panic("entity: Register called twice for object " + name)
	}
	objects[name] = createfunc
}

//创建数据对象
func Create(name string) Entityer {
	if create, exist := objects[name]; exist {
		return create()
	}

	return nil
}

//获取类型
func GetType(name string) int {
	switch name {
	case "BaseScene":
		return SCENE
	case "Container":
		return ITEM
	case "Player":
		return PLAYER
	case "Item":
		return ITEM
	default:
		return NONE
	}
}

func CreateSaveLoader(typ string) DBSaveLoader {
	switch typ {
	case "BaseScene":
		return &BaseScene_Save{}
	case "Container":
		return &Container_Save{}
	case "Player":
		return &Player_Save{}
	case "Item":
		return &Item_Save{}
	default:
		return nil
	}
}

func Hash(str string) int32 {
	hash := 5381
	for _, c := range str {
		hash += (hash << 5) + int(c)
	}

	return int32(hash & 0x7FFFFFFF)
}

func IsBaseScene(ent Entityer) bool {
	return ent.ObjTypeName() == "BaseScene"
}

func IsContainer(ent Entityer) bool {
	return ent.ObjTypeName() == "Container"
}

func IsPlayer(ent Entityer) bool {
	return ent.ObjTypeName() == "Player"
}

func IsItem(ent Entityer) bool {
	return ent.ObjTypeName() == "Item"
}

//初始化函数
func init() {

	register("BaseScene", func() Entityer {
		return CreateBaseScene()
	})
	BaseSceneInit()

	register("Container", func() Entityer {
		return CreateContainer()
	})
	ContainerInit()

	register("Player", func() Entityer {
		return CreatePlayer()
	})
	PlayerInit()

	register("Item", func() Entityer {
		return CreateItem()
	})
	ItemInit()

	gob.Register(&EntityInfo{})
}
