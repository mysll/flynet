// Code generated by data parser.
// DO NOT EDIT!
package entity

import (
	. "data/datatype"
	"errors"
	"encoding/gob"
)

var (
	ErrRowError = errors.New("row index out of range")
	ErrColError = errors.New("col index out of range")
	ErrTypeMismatch = errors.New("val type mismatch")
	ErrColTypeError = errors.New("column type error")
	ErrPropertyNotFound = errors.New("property not found")
	ErrSqlRowError = errors.New("sql query not found")
	ErrSqlUpdateError   = errors.New("update id not found")
	ErrContainerFull	= errors.New("container is full")
	ErrContainerIndexHasChild = errors.New("container index not empty")
	ErrContainerIndexOutOfRange = errors.New("container index out of range")
	ErrContainerNotInit = errors.New("container not init")
	ErrContainerCapacity = errors.New("capacity illegal")
	ErrChildObjectNotFound = errors.New("child obj not found")
	ErrCopyObjError = errors.New("type not equal")
	ErrExtraDataError = errors.New("extra data not found")
)

var objects = make(map[string]func() Entityer)

//注册函数
func register(name string, createfunc func() Entityer) {
	if _, dup := objects[name]; dup {
		panic("entity: Register called twice for object " + name)
	}
	objects[name] = createfunc
}

//创建数据对象
func Create(name string) Entityer {
	if create, exist := objects[name]; exist {
		return create()
	}

	return nil
}

//获取类型
func GetType(name string) int {
	switch name { {{range .}}
	case "{{.Name}}":
		return {{.Type}}{{end}}
	default:
		return NONE
	}
}

func CreateSaveLoader(typ string) DBSaveLoader {
	switch typ { {{range .}}
	case "{{.Name}}":
		return &{{.Name}}_Save{}{{end}}
	default:
		return nil
	}
}

func Hash(str string) int32 {
	hash := 5381
	for _, c := range str {
		hash += (hash << 5) + int(c)
	}

	return int32(hash & 0x7FFFFFFF)
}

{{range .}}
func Is{{.Name}}(ent Entityer) bool {
		return ent.ObjTypeName()=="{{.Name}}"
}
{{end}}

//初始化函数
func init() {
	{{range .}}
	register("{{.Name}}", func() Entityer {
		return Create{{.Name}}()
	})
	{{.Name}}Init()
	{{end}}

	gob.Register(&EntityInfo{})
}
